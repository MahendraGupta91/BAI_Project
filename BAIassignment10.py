#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.3
#  in conjunction with Tcl version 8.6
#    Jul 17, 2020 08:32:26 PM IST  platform: Windows NT

import sys
import json
from PIL import Image, ImageTk
import pandas as pd
import numpy as np
from collections import Counter
import statistics 

try:
    import Tkinter as tk
    from tkinter.simpledialog import askstring, askinteger
    from tkinter.messagebox import showerror

except ImportError:
    import tkinter as tk
    from tkinter.simpledialog import askstring, askinteger
    from tkinter.messagebox import showerror

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True




# Respondents data are stored in this given format, HM in Metre, HC in centimetres and age in years
#ABI_Respondant_Data_Formate={1:{"Gender":"Male/Female","Age":29, "HM":1.80, "HC": 90.5, "ABI": 20.90},
#                                   2:{"Gender":"Male/Female","Age":29, "HM":1.80, "HC": 90.5, "ABI": 20.90}}
ABI_Respondant_Data={}
SampleCounter_n=0

# Multiplication Factor for Conversion
#InchToMetre=0.0254
#CentimetreToMetre=0.01
#MetreToCentimetre=100
#InchToCentimetre=2.54



#Load Respondant Old data into Environment which sre stored in json file.
# ABI_Respondant_Data.json is stored into same directory where main program is stored
with open('ABI_Respondant_Data.json') as ABI_Data_reader:
    ABI_Respondant_Data=json.load(ABI_Data_reader)
    SampleCounter_n=len(ABI_Respondant_Data)
    


def Male_Summary(df_t):
    global MaleTextVar
    GenderCount=Counter(df_t.Gender.T)
    ClassCount=Counter(df_t.Class.T)
    SampleCounter_n=GenderCount["Male"]
    
    #df_
    # Overall Summary
    Text1="Male="+str(GenderCount["Male"])
    Text12="\nUnderweight="+str("{:.2f}".format((ClassCount["Underweight"]/SampleCounter_n)*100))+"%"
    Text13="\nHealthy="+str("{:.2f}".format((ClassCount["Healthy"]/SampleCounter_n)*100))+"%"
    Text14="\nOverweight="+str("{:.2f}".format((ClassCount["OverWeight"]/SampleCounter_n)*100))+"%"
    Text15="\nObese="+str("{:.2f}".format((ClassCount["Obese"]/SampleCounter_n)*100))+"%"
    Text16="\nBAI Mean="+str("{:.2f}".format(df_t.ABI.mean()))
    Text17="\nBAI Stdev="+str("{:.2f}".format(statistics.stdev(df_t.ABI)))
    Text18="\nBAI Var="+str("{:.2f}".format(statistics.variance(df_t.ABI)))
    OverAllText=""+Text1+Text12+Text13+Text14+Text15+Text16+Text17+Text18
    MaleTextVar.set(OverAllText)
    
    
def Female_Summary(df_t):
    global FemaleTextVar
    GenderCount=Counter(df_t.Gender.T)
    ClassCount=Counter(df_t.Class.T)
    SampleCounter_n=GenderCount["Female"]
    
    #df_
    # Overall Summary
    Text1="Female="+str(GenderCount["Female"])
    Text12="\nUnderweight="+str("{:.2f}".format((ClassCount["Underweight"]/SampleCounter_n)*100))+"%"
    Text13="\nHealthy="+str("{:.2f}".format((ClassCount["Healthy"]/SampleCounter_n)*100))+"%"
    Text14="\nOverweight="+str("{:.2f}".format((ClassCount["OverWeight"]/SampleCounter_n)*100))+"%"
    Text15="\nObese="+str("{:.2f}".format((ClassCount["Obese"]/SampleCounter_n)*100))+"%"
    Text16="\nBAI Mean="+str("{:.2f}".format(df_t.ABI.mean()))
    Text17="\nBAI Stdev="+str("{:.2f}".format(statistics.stdev(df_t.ABI)))
    Text18="\nBAI Var="+str("{:.2f}".format(statistics.variance(df_t.ABI)))
    OverAllText=""+Text1+Text12+Text13+Text14+Text15+Text16+Text17+Text18
    FemaleTextVar.set(OverAllText)
    

# This function is to display the stats of stored data
def Data_summary():
    global ABI_Respondant_Data,SampleCounter_n,OverAllTextVar,MaleTextVar,FemaleTextVar
    print("Disply Cliked")
    update_Data_in_File()
    df=pd.read_json ("ABI_Respondant_Data.json")
    #df=ABI_Respondant_Data
    #print(df."Name")
    df_t=df.T
    GenderCount=Counter(df_t.Gender.T)
    ClassCount=Counter(df_t.Class.T)
    
    #df_
    # Overall Summary
    Text1="Total Sample="+str(SampleCounter_n)+"\nMale="+str(GenderCount["Male"])+" Female="+str(GenderCount["Female"])
    Text12="\nUnderweight="+str("{:.2f}".format((ClassCount["Underweight"]/SampleCounter_n)*100))+"%"
    Text13="\nHealthy="+str("{:.2f}".format((ClassCount["Healthy"]/SampleCounter_n)*100))+"%"
    Text14="\nOverweight="+str("{:.2f}".format((ClassCount["OverWeight"]/SampleCounter_n)*100))+"%"
    Text15="\nObese="+str("{:.2f}".format((ClassCount["Obese"]/SampleCounter_n)*100))+"%"
    Text16="\nBAI Mean="+str("{:.2f}".format(df_t.ABI.mean()))
    Text17="\nBAI Stdev="+str("{:.2f}".format(statistics.stdev(df_t.ABI)))
    Text18="\nBAI Var="+str("{:.2f}".format(statistics.variance(df_t.ABI)))
    OverAllText=""+Text1+Text12+Text13+Text14+Text15+Text16+Text17+Text18
    OverAllTextVar.set(OverAllText)
    
    Male_data=df_t[df_t["Gender"]=="Male"]
    Male_Summary(Male_data)
    Female_data=df_t[df_t["Gender"]=="Female"]
    Female_Summary(Female_data)
    
#    GenderCount=Counter(Male_data.Gender.T)
#    ClassCount=Counter(Male_data.Class.T)
#    #df_
#    # Overall Summary
#    Text1="Male Sample="+str(GenderCount["Male"])
#    Text12="\nUnderweight="+str("{:.2f}".format((ClassCount["Underweight"]/SampleCounter_n)*100))+"%"
#    Text13=" Healthy="+str("{:.2f}".format((ClassCount["Healthy"]/SampleCounter_n)*100))+"%"
#    Text14="\nOverweight="+str("{:.2f}".format((ClassCount["Overweight"]/SampleCounter_n)*100))+"%"
#    Text15=" Obese="+str("{:.2f}".format((ClassCount["Obese"]/SampleCounter_n)*100))+"%"
#    Text16="\nABI Mean="+str("{:.2f}".format(df_t.ABI.mean()))
#    Text17="\nABI Stdev="+str("{:.2f}".format(statistics.stdev(df_t.ABI)))
#    Text18="\nABI Var="+str("{:.2f}".format(statistics.variance(df_t.ABI)))
#    OverAllText=""+Text1+Text12+Text13+Text14+Text15+Text16+Text17+Text18
#    MaleTextVar.set(OverAllText)
    
    
    
    
    #print(Text1+Text12+Text13+Text14+Text15+Text16+Text17+Text18)
    
    #tk.Message(f2,text=OverAllText, anchor="e").grid()
    
    
    
#    print(df_t.ABI.mean())
#    print(df_t.ABI.mean())
#    Male_data=df_t[df_t["Gender"]=="Male"]
#    #print(Male_data)
#    Female_data=df_t[df_t["Gender"]=="Female"]
#    
#    print(Counter(df_t.Gender.T).keys())
#    print(Counter(df_t.Gender.T).values())
#    print(Counter(df_t.Class.T).keys())
#    ClassValues=Counter(df_t.Class.T).values()
   
    



w = None


#def destroy_Toplevel1():
#    global w
#    w.destroy()
#    w = None
def on_Click(e):
#    if EntryName.get()=="":
#        print("Enter Value")
#    else:
#        print(EntryName.get())
    print(genderVar.get())
    print(Validate_Data(e))
def hello():
    print("Mahendra")
    
def update_Data_in_File():
    global ABI_Respondant_Data
    with open('ABI_Respondant_Data.json', 'w') as dict_writer:
        json.dump(ABI_Respondant_Data, dict_writer)
        print("updated")
        

# Update Original ABI_Respondant_Data.json file before closing
def Close_window():
        update_Data_in_File()
#    global ABI_Respondant_Data
#    with open('ABI_Respondant_Data.json', 'w') as dict_writer:
#        json.dump(ABI_Respondant_Data, dict_writer)
#        print("updated")
        try:
            top.destroy()
        except:
            pass
      #  top.destroy()


def Validate_Data(e):
    Name=EntryName.get()
    HM = EntryHM.get()
    HC = EntryHC.get()
    Age = EntryAge.get()
    Gender=genderVar.get()
    
    if Name=="":
        showerror('Name Error', 'Name Field Cannot be Empty!')
        return(False)
    else:
            print(Name)
    
    try:
       Age = float(Age)
       if Age>79 or Age<20:
          showerror('Age Error', 'Age cannot be more than 79 years and less than 20!')
          return False
    ## ValueError is expected Error
    except ValueError:
        # Showing Error for Invalid HM Value
        showerror('Age Error', 'Please enter a Valid Age Value!')
        return(False)
    else:
        print(Age)
    
    try:
       HM = float(HM)
    ## ValueError is expected Error
    except ValueError:
        # Showing Error for Invalid HM Value
        showerror('HM Error', 'Please enter an Valid HM Value!')
        return(False)
    else:
        print(HM)
        
    
    try:
       HC = float(HC)
    # ValueError is expected Error
    except ValueError:
        
        showerror('HC Error', 'Please enter an Valid HC Value')
        return(False)
    else:
        print(HC)
    #print(ABI_calculator(HM,HC))
    global Frame2
    IndividualDataDisplay(Frame2,InsertData(Name,Gender, Age, HM, HC))
    return True


# Function Defined fo calculating BAI of an Individual
def BAI_calculator(HM, HC):
    
    ABI=HC/pow(HM,1.5)-18
    return ABI
# Function Definition for BAI Classification
# It will use Gender, AgeGroup, and BAI Value to Label whether person is underweigt, Healthy , Oerweight Or Obese
def BAI_Classifier(Gender, AgeGroup, BAI):
    if Gender=="Female":
        if AgeGroup==1: # 20-39
            if BAI<21:
                return "Underweight"
            elif BAI>=21 and BAI<=33:
                return "Healthy"
            elif BAI>33 and BAI<=39:
                return "OverWeight"
            elif BAI>39:
                return "Obese"
        elif AgeGroup==2: # 40-59
            if BAI<23:
                return "Underweight"
            elif BAI>=23 and BAI<=35:
                return "Healthy"
            elif BAI>35 and BAI<=41:
                return "OverWeight"
            elif BAI>41:
                return "Obese"     
        elif AgeGroup==3:  #60-79
             if BAI<25:
                return "Underweight"
             elif BAI>=25 and BAI<=38:
                return "Healthy"
             elif BAI>38 and BAI<=43:
                return "OverWeight"
             elif BAI>43:
                return "Obese"
    elif Gender=="Male":
        if AgeGroup==1: # 20-39
            if BAI<8:
                return "Underweight"
            elif BAI>=8 and BAI<=21:
                return "Healthy"
            elif BAI>21 and BAI<=26:
                return "OverWeight"
            elif BAI>26:
                return "Obese"
        elif AgeGroup==2: # 40-59
            if BAI<11:
                return "Underweight"
            elif BAI>=11 and BAI<=23:
                return "Healthy"
            elif BAI>23 and BAI<=29:
                return "OverWeight"
            elif BAI>29:
                return "Obese"     
        elif AgeGroup==3:  #60-79
             if BAI<13:
                return "Underweight"
             elif BAI>=13 and BAI<=25:
                return "Healthy"
             elif BAI>25 and BAI<=31:
                return "OverWeight"
             elif BAI>31:
                return "Obese"
        
        
        
        
    

# defining function to insert Respondant data into Dictionary BAI_Respondant_Data
def InsertData(RespondantName,Gender, Age, HM, HC):
    
    global scaleOptionHC, scaleOptionHM   
    if "Inch"==scaleTypeHM.get():
        HM=HM*0.0254
    elif "CM"==scaleTypeHM.get():
        HM=HM*0.01
    elif "CM"==scaleTypeHM.get():
        HM=HM*0.3048
        
    if "Inch"==scaleTypeHC.get():
        HC=HC*2.54
    elif "Metre"==scaleTypeHC.get():
        HC=HC*100
    elif "Metre"==scaleTypeHC.get():
        HC=HC*30.48
        
    ABI=BAI_calculator(HM,HC)
    tempDict={}
    AgeGroup=0
    if (Age>=20) and (Age<=39):
        AgeGroup=1
    elif Age>=40 and Age<=59:
        AgeGroup=2
    elif Age>=60 and Age<=79:
        AgeGroup=3
    tempDict["Name"]=RespondantName
    tempDict["Gender"]=Gender
    tempDict["Age"]=Age
    tempDict["AgeGroup"]=AgeGroup
    tempDict["HM"]=HM
    tempDict["HC"]=HC
    tempDict["ABI"]=ABI
    tempDict["Class"]=BAI_Classifier(Gender, AgeGroup, ABI)
    print(tempDict["Class"])
    global SampleCounter_n  
    ABI_Respondant_Data[SampleCounter_n]=tempDict
    SampleCounter_n=SampleCounter_n+1
    showerror('Update Status', 'Values Inserted')
    return tempDict

# Defining Function to Display Individual Data
def IndividualDataDisplay(Frame2,IndividualData):
    global DisplayNameVar,DisplayGenderVar,DisplayAgeGrpVar,DisplayABIVar, DisplayClassVar
    DisplayNameVar.set(IndividualData["Name"])
    DisplayGenderVar.set(IndividualData["Gender"])
    DisplayAgeGrpVar.set(str(IndividualData["AgeGroup"]))
    ABI_float=IndividualData["ABI"]
    DisplayABIVar.set("{:.2f}".format(ABI_float))
    DisplayClassVar.set(IndividualData["Class"])
    
#    LabelName=tk.Label(Frame2)
#    LabelName.place(relx=0.082, rely=0.195, height=21)
#    LabelName.configure(text="Name :"+IndividualData["Name"])
#    
#    LabelAge=tk.Label(Frame2)
#    LabelAge.place(relx=0.082, rely=0.39, height=21)
#    LabelAge.configure(text="Age :"+str(IndividualData["Age"]))
#    
#    LabelAgeGroup=tk.Label(Frame2)
#    LabelAgeGroup.place(relx=0.082, rely=0.488, height=21)
#    LabelAgeGroup.configure(text="AgeGroup :"+str(IndividualData["AgeGroup"]))
#    
#    LabelABI=tk.Label(Frame2)
#    LabelABI.place(relx=0.082, rely=0.586, height=21)
#    LabelABI.configure(text="ABI :"+str(IndividualData["ABI"]))
    
   
   


#Constants Value
_bgcolor = '#d9d9d9'  
_fgcolor = '#000000'  
_compcolor = '#d9d9d9' 
_ana1color = '#d9d9d9' 
_ana2color = '#ececec' 


top = tk.Tk()
top.geometry("600x450+486+169")
top.minsize(120, 1)
top.maxsize(1370, 749)
top.resizable(1, 1)
top.title("BAI Analyzer")
top.configure(background="#d9d9d9")

welcomeLabel = tk.Label(top)
welcomeLabel.place(relx=0.317, rely=0.022, height=35)
welcomeLabel.configure(background="#d9d9d9")
welcomeLabel.configure(disabledforeground="#a3a3a3")
welcomeLabel.configure(foreground="#000000")
welcomeLabel.configure(font="20")
welcomeLabel.configure(text='''Welcome to ABI Analyzer.''')

     
Frame1 = tk.Frame(top)
Frame1.place(relx=0.033, rely=0.089, relheight=0.456
                , relwidth=0.475)
Frame1.configure(relief='groove')
Frame1.configure(borderwidth="2")
Frame1.configure(relief="groove")
Frame1.configure(background="#d9d9d9")

LabelRwindow= tk.Label(Frame1)
LabelRwindow.place(relx=0.281, rely=0.049, height=21)
LabelRwindow.configure(background="#d9d9d9")
LabelRwindow.configure(disabledforeground="#a3a3a3")
LabelRwindow.configure(foreground="#000000")
LabelRwindow.configure(font="16")
LabelRwindow.configure(text='''Respondents Window.''')

LabelRname = tk.Label(Frame1)
LabelRname.place(relx=0.035, rely=0.195, height=21, width=38)
LabelRname.configure(background="#d9d9d9")
LabelRname.configure(disabledforeground="#a3a3a3")
LabelRname.configure(foreground="#000000")
LabelRname.configure(text='''Name''')

EntryNameVar=tk.StringVar()
EntryName = tk.Entry(Frame1)
EntryName.place(relx=0.211, rely=0.195,height=20, relwidth=0.4)
EntryName.configure(background="white")
EntryName.configure(disabledforeground="#a3a3a3")
EntryName.configure(font="TkFixedFont")
EntryName.configure(foreground="#000000")
EntryName.configure(insertbackground="black")
EntryName.configure(textvariable=EntryNameVar)

Label3 = tk.Label(Frame1)
Label3.place(relx=0.667, rely=0.195, height=21, width=27)
Label3.configure(background="#d9d9d9")
Label3.configure(disabledforeground="#a3a3a3")
Label3.configure(foreground="#000000")
Label3.configure(text='''Age''')

EntryAge = tk.Entry(Frame1)
EntryAge.place(relx=0.772, rely=0.195,height=20, relwidth=0.119)
EntryAge.configure(background="white")
EntryAge.configure(disabledforeground="#a3a3a3")
EntryAge.configure(font="TkFixedFont")
EntryAge.configure(foreground="#000000")
EntryAge.configure(insertbackground="black")

Label4 = tk.Label(Frame1)
Label4.place(relx=0.035, rely=0.341, height=21, width=44)
Label4.configure(background="#d9d9d9")
Label4.configure(disabledforeground="#a3a3a3")
Label4.configure(foreground="#000000")
Label4.configure(text='''Gender''')
        

LabelHM = tk.Label(Frame1)
LabelHM.place(relx=0.035, rely=0.488, height=21, width=26)
LabelHM.configure(background="#d9d9d9")
LabelHM.configure(disabledforeground="#a3a3a3")
LabelHM.configure(foreground="#000000")
LabelHM.configure(text='''HM''')
        
scaleTypeHM=tk.StringVar()
scaleTypeHM.set("Metre")
        
scaleOptionHM = tk.OptionMenu(Frame1, scaleTypeHM, "Metre", "CM","Inch","ft")
scaleOptionHM.place(relx=0.211, rely=0.488,height=20, relwidth=0.250)
scaleOptionHM.configure(border=0)
EntryHMVar=tk.StringVar()      
EntryHM = tk.Entry(Frame1)
EntryHM.place(relx=0.52, rely=0.488,height=20, relwidth=0.150)
EntryHM.configure(background="white")
EntryHM.configure(disabledforeground="#a3a3a3")
EntryHM.configure(font="TkFixedFont")
EntryHM.configure(foreground="#000000")
EntryHM.configure(insertbackground="black")

LabelHC = tk.Label(Frame1)
LabelHC.place(relx=0.035, rely=0.634, height=21, width=26)
LabelHC.configure(activebackground="#f9f9f9")
LabelHC.configure(activeforeground="black")
LabelHC.configure(background="#d9d9d9")
LabelHC.configure(disabledforeground="#a3a3a3")
LabelHC.configure(foreground="#000000")
LabelHC.configure(highlightbackground="#d9d9d9")
LabelHC.configure(highlightcolor="black")
LabelHC.configure(text='''HC''')
        
scaleTypeHC=tk.StringVar()
scaleTypeHC.set("CM")
        
scaleOptionHC = tk.OptionMenu(Frame1, scaleTypeHC, "Metre", "CM","Inch","ft")
scaleOptionHC.place(relx=0.211, rely=0.634,height=20, relwidth=0.250)
scaleOptionHC.configure(border=0)
        
        
EntryHC = tk.Entry(Frame1)
EntryHC.place(relx=0.52, rely=0.634,height=20, relwidth=0.150)
EntryHC.configure(background="white")
EntryHC.configure(disabledforeground="#a3a3a3")
EntryHC.configure(font="TkFixedFont")
EntryHC.configure(foreground="#000000")
EntryHC.configure(highlightbackground="#d9d9d9")
EntryHC.configure(highlightcolor="black")
EntryHC.configure(insertbackground="black")
EntryHC.configure(selectbackground="#c4c4c4")
EntryHC.configure(selectforeground="black")



genderVar=tk.StringVar()
genderVar.set("Male")
RadioMale = tk.Radiobutton(Frame1)
RadioMale.place(relx=0.246, rely=0.341, relheight=0.122
                , relwidth=0.204)
RadioMale.configure(activebackground="#ececec")
RadioMale.configure(activeforeground="#000000")
RadioMale.configure(background="#d9d9d9")
#RadioMale.configure()
RadioMale.configure(disabledforeground="#a3a3a3")
RadioMale.configure(foreground="#000000")
RadioMale.configure(highlightbackground="#d9d9d9")
RadioMale.configure(highlightcolor="black")
RadioMale.configure(justify='left')
RadioMale.configure(text='''Male''')
RadioMale.configure(value="Male")
RadioMale.configure(variable=genderVar)

        
        
RadioFemale = tk.Radiobutton(Frame1)
RadioFemale.place(relx=0.456, rely=0.341, relheight=0.122
                , relwidth=0.204)
RadioFemale.configure(activebackground="#ececec")
RadioFemale.configure(activeforeground="#000000")
RadioFemale.configure(background="#d9d9d9")
RadioFemale.configure(disabledforeground="#a3a3a3")
RadioFemale.configure(foreground="#000000")
RadioFemale.configure(highlightbackground="#d9d9d9")
RadioFemale.configure(highlightcolor="black")
RadioFemale.configure(justify='left')
RadioFemale.configure(text='''Female''')

RadioFemale.configure(value="Female")
RadioFemale.configure(variable=genderVar)

ButtonSubmit = tk.Button(Frame1)
ButtonSubmit.place(relx=0.456, rely=0.78, height=24, width=47)
ButtonSubmit.configure(activebackground="#ececec")
ButtonSubmit.configure(activeforeground="#000000")
ButtonSubmit.configure(background="#d9d9d9")
ButtonSubmit.configure(disabledforeground="#a3a3a3")
ButtonSubmit.configure(foreground="#000000")
ButtonSubmit.configure(highlightbackground="#d9d9d9")
ButtonSubmit.configure(highlightcolor="black")
ButtonSubmit.configure(pady="0")
ButtonSubmit.configure(text='''Submit''')
ButtonSubmit.bind("<Button-1>", on_Click)

Frame2 = tk.Frame(top)
Frame2.place(relx=0.52, rely=0.089, relheight=0.456, relwidth=0.435)

Frame2.configure(relief='groove')
Frame2.configure(borderwidth="2")
Frame2.configure(relief="groove")
Frame2.configure(background="#d9d9d9")

Label1_7 = tk.Label(Frame2)
Label1_7.place(relx=0.09, rely=0.049, height=21, width=230)
Label1_7.configure(activebackground="#f9f9f9")
Label1_7.configure(activeforeground="black")
Label1_7.configure(background="#d9d9d9")
Label1_7.configure(disabledforeground="#a3a3a3")
Label1_7.configure(foreground="#000000")
Label1_7.configure(highlightbackground="#d9d9d9")
Label1_7.configure(highlightcolor="black")
Label1_7.configure(font="10")
Label1_7.configure(text='''Respondent's Individual Analysis''')

#def IndividualDataDisplay(Frame2,IndividualData):
#    LabelName=tk.Label(Frame2)
#    LabelName.place(relx=0.082, rely=0.195, height=21, width=38)
#    LabelName.configure(text="Name :"+IndividualData["Name"])
#    

Label2_8 = tk.Label(Frame2)
Label2_8.place(relx=0.082, rely=0.195, height=21, width=38)
Label2_8.configure(activebackground="#f9f9f9")
Label2_8.configure(activeforeground="black")
Label2_8.configure(background="#d9d9d9")
Label2_8.configure(disabledforeground="#a3a3a3")
Label2_8.configure(foreground="#000000")
Label2_8.configure(highlightbackground="#d9d9d9")
Label2_8.configure(highlightcolor="black")
Label2_8.configure(text='''Name''')

DisplayNameVar=tk.StringVar()
DisplayNameVar.set("")
DisplayName = tk.Label(Frame2)
DisplayName.place(relx=0.408, rely=0.195, height=21, width=84)
DisplayName.configure(background="#d9d9d9")
DisplayName.configure(disabledforeground="#a3a3a3")
DisplayName.configure(foreground="#000000")
DisplayName.configure(textvariable=DisplayNameVar)


Label2_9 = tk.Label(Frame2)
Label2_9.place(relx=0.082, rely=0.293, height=21, width=38)
Label2_9.configure(activebackground="#f9f9f9")
Label2_9.configure(activeforeground="black")
Label2_9.configure(background="#d9d9d9")
Label2_9.configure(disabledforeground="#a3a3a3")
Label2_9.configure(foreground="#000000")
Label2_9.configure(highlightbackground="#d9d9d9")
Label2_9.configure(highlightcolor="black")
Label2_9.configure(text='''Gender''')

DisplayGenderVar=tk.StringVar()
DisplayGenderVar.set("")
DisplayGender = tk.Label(Frame2)
DisplayGender.place(relx=0.408, rely=0.293, height=21, width=90)
DisplayGender.configure(activebackground="#f9f9f9")
DisplayGender.configure(activeforeground="black")
DisplayGender.configure(background="#d9d9d9")
DisplayGender.configure(disabledforeground="#a3a3a3")
DisplayGender.configure(foreground="#000000")
DisplayGender.configure(highlightbackground="#d9d9d9")
DisplayGender.configure(highlightcolor="black")
DisplayGender.configure(textvariable=DisplayGenderVar)

Label2_9 = tk.Label(Frame2)
Label2_9.place(relx=0.082, rely=0.39, height=21, width=50)
Label2_9.configure(activebackground="#f9f9f9")
Label2_9.configure(activeforeground="black")
Label2_9.configure(background="#d9d9d9")
Label2_9.configure(disabledforeground="#a3a3a3")
Label2_9.configure(foreground="#000000")
Label2_9.configure(highlightbackground="#d9d9d9")
Label2_9.configure(highlightcolor="black")
Label2_9.configure(text='''Age Grp''')

DisplayAgeGrpVar=tk.StringVar()
DisplayAgeGrpVar.set("")
DisplayAgeGrp = tk.Label(Frame2)
DisplayAgeGrp.place(relx=0.408, rely=0.39, height=21, width=90)
DisplayAgeGrp.configure(activebackground="#f9f9f9")
DisplayAgeGrp.configure(activeforeground="black")
DisplayAgeGrp.configure(background="#d9d9d9")
DisplayAgeGrp.configure(disabledforeground="#a3a3a3")
DisplayAgeGrp.configure(foreground="#000000")
DisplayAgeGrp.configure(highlightbackground="#d9d9d9")
DisplayAgeGrp.configure(highlightcolor="black")
DisplayAgeGrp.configure(textvariable=DisplayAgeGrpVar)

Label2_9 = tk.Label(Frame2)
Label2_9.place(relx=0.082, rely=0.488, height=21, width=38)
Label2_9.configure(activebackground="#f9f9f9")
Label2_9.configure(activeforeground="black")
Label2_9.configure(background="#d9d9d9")
Label2_9.configure(disabledforeground="#a3a3a3")
Label2_9.configure(foreground="#000000")
Label2_9.configure(highlightbackground="#d9d9d9")
Label2_9.configure(highlightcolor="black")
Label2_9.configure(text='''BAI''')

DisplayABIVar=tk.StringVar()
DisplayABIVar.set("")

DisplayABI = tk.Label(Frame2)
DisplayABI.place(relx=0.408, rely=0.488, height=21, width=84)
DisplayABI.configure(activebackground="#f9f9f9")
DisplayABI.configure(activeforeground="black")
DisplayABI.configure(background="#d9d9d9")
DisplayABI.configure(disabledforeground="#a3a3a3")
DisplayABI.configure(foreground="#000000")
DisplayABI.configure(highlightbackground="#d9d9d9")
DisplayABI.configure(highlightcolor="black")
DisplayABI.configure(textvariable=DisplayABIVar)


# Name location
#Label2_8.place(relx=0.082, rely=0.195, height=21, width=38)



#Age Location
#Label2_9.place(relx=0.082, rely=0.39, height=21, width=98)





#ABI Location
#Label2_9.place(relx=0.082, rely=0.488, height=21, width=98)






Label2_10 = tk.Label(Frame2)
Label2_10.place(relx=0.082, rely=0.585, height=21, width=38)
Label2_10.configure(activebackground="#f9f9f9")
Label2_10.configure(activeforeground="black")
Label2_10.configure(background="#d9d9d9")
Label2_10.configure(disabledforeground="#a3a3a3")
Label2_10.configure(foreground="#000000")
Label2_10.configure(highlightbackground="#d9d9d9")
Label2_10.configure(highlightcolor="black")
Label2_10.configure(text='''Class''')

DisplayClassVar=tk.StringVar()
DisplayClassVar.set("")

DisplayClass = tk.Label(Frame2)
DisplayClass.place(relx=0.49, rely=0.585, height=21)
DisplayClass.configure(activebackground="#f9f9f9")
DisplayClass.configure(activeforeground="black")
DisplayClass.configure(background="#d9d9d9")
DisplayClass.configure(disabledforeground="#a3a3a3")
DisplayClass.configure(foreground="#000000")
DisplayClass.configure(highlightbackground="#d9d9d9")
DisplayClass.configure(highlightcolor="black")
DisplayClass.configure(textvariable=DisplayClassVar)

Frame3 = tk.Frame(top)
#Frame3.place(relx=0.033, rely=0.556, relheight=0.433, relwidth=0.925)
Frame3.place(relx=0.033, rely=0.556, relheight=0.433, relwidth=0.925)
Frame3.configure(relief='groove')
Frame3.configure(borderwidth="2")
Frame3.configure(relief="groove")
Frame3.configure(background="#d9d9d9")




f2 = tk.Frame(Frame3,height=100,width=300,bg='#d9d9d9')
f3 = tk.Frame(Frame3,height=100,width=300,bg='#d9d9d9')
f4 = tk.Frame(Frame3,height=100,width=300,bg='#d9d9d9')
f5 = tk.Frame(Frame3,bg='#d9d9d9')
f6 = tk.Frame(Frame3,bg='#d9d9d9')
f7 = tk.Frame(Frame3,bg='#d9d9d9')
                                          
                  
#    #f2.grid_propagate(0)
f2.grid(row=1, column=0,sticky="nsew")
f3.grid(row=1, column=1,sticky="nsew")
f4.grid(row=1, column=2,sticky="nsew")
f5.grid(row=0, column=0,sticky="nsew")
f6.grid(row=0, column=1,sticky="nsew")
f7.grid(row=0, column=2,sticky="nsew")
OverAllTextVar=tk.StringVar()

MaleTextVar=tk.StringVar()

FemaleTextVar=tk.StringVar()

   
    #tk.Label(f1, text=word, bg='#1A5266', fg="white",font="Times 16 bold",anchor="e").grid()
    #tk.Label(f2, text="FRAME 2",fg="black",bg='#effbfe', width=20,font="Helvetica 16",anchor="e").grid()
tk.Message(f2,textvariable=OverAllTextVar,bg='#d9d9d9', anchor="e").grid()
tk.Message(f3,textvariable=MaleTextVar,bg='#d9d9d9').grid()
tk.Message(f4,textvariable=FemaleTextVar,bg='#d9d9d9', anchor="e").grid()
tk.Label(f5,text="Overall Summary",fg="black",bg='#d9d9d9',font="Times 14").grid()
tk.Label(f6,text="Male Summary",fg="black",bg='#d9d9d9',font="Times 14").grid()
tk.Label(f7,text="Female Summary",fg="black",bg='#d9d9d9',font="Times 14").grid()

Button2 = tk.Button(top)
Button2.place(relx=0.456, rely=0.93, height=24)
Button2.configure(activebackground="#ececec")
Button2.configure(activeforeground="#000000")
Button2.configure(background="#d9d9d9")
Button2.configure(disabledforeground="#a3a3a3")
Button2.configure(foreground="#000000")
Button2.configure(highlightbackground="#d9d9d9")
Button2.configure(highlightcolor="black")
Button2.configure(pady="0")
Button2.configure(command=Data_summary)
Button2.configure(text='''Display Summary''')
#Display_Window(Frame3)
Data_summary()

top.protocol("WM_DELETE_WINDOW",Close_window)
top.mainloop()





